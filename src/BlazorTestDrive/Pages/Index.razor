@page "/"
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

@using FieldDataPluginFramework.DataModel
@using FieldDataPluginFramework.DataModel.Calibrations
@using FieldDataPluginFramework.DataModel.DischargeActivities
@using FieldDataPluginFramework.DataModel.PickLists
@using FieldDataPluginFramework.DataModel.Readings
@using System.Text
@using FieldDataPluginFramework.DataModel.ChannelMeasurements
@using FieldDataPluginFramework.DataModel.Meters
@using System.IO
@using FieldDataPluginFramework.DataModel.GageZeroFlow
@using Microsoft.AspNetCore.WebUtilities

<h1>Let's test drive your tabular field data!</h1>

<table style="width: 100%;">
    <colgroup>
        <col style="width: 10%;" />
        <col style="width: 80%;" />
    </colgroup>
    <tbody>
        <tr>
            <td>Pick an example:</td>
            <td>
                <div>
                    <label for="example">Examples</label>
                    <select id="example" @bind="@SelectedExampleId">
                        @foreach (var example in Examples)
                        {
                            <option value="@example.Id">@example.Name</option>
                        }
                    </select>
                </div>
                <div>@((MarkupString) DescriptionHtml)</div>
            </td>
        </tr>
        <tr>
            <td>
                Your config:
                <br />
                <br />
                <InputFile id="configFile" OnChange="OnConfigFileSelected" />
            </td>
            <td>
                <textarea rows="8" cols="100" wrap="off" style="font-family: monospace;" @bind="Config"></textarea>
            </td>
        </tr>
        <tr>
            <td>
                Your CSV:
                <br />
                <br />
                <InputFile id="csvFile" OnChange="OnCsvFileSelected" />
                <div>
                    <label for="encoding">Encoding:</label>
                    <select id="encoding" @bind="@SelectedEncodingName">
                        @foreach (var encoding in Encodings)
                        {
                            <option value="@encoding.Name" selected="@(encoding.Name.Equals(SelectedEncodingName) || string.IsNullOrEmpty(SelectedEncodingName) && encoding.Name.Equals("utf-8"))">@encoding.Name</option>
                        }
                    </select>
                </div>
            </td>
            <td>
                <textarea rows="4" cols="100" wrap="off" style="font-family: monospace;" @bind="Csv"></textarea>
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <input id="Button1" type="button" value="Try it!" @onclick="Parse" />&nbsp;&nbsp;
                <label for="location">Optional Location:</label>
                <input id="location" type="text" @bind="Location" />
                <label for="timezone">Timezone</label>
                <select id="timezone" @bind="TimeZone">
                    @foreach (var timeZone in TimeZones)
                    {
                        <option value="@timeZone" selected="@string.IsNullOrWhiteSpace(timeZone)">@timeZone</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Details:<br /><span>@Results?.ResultTime</span></td>
            <td><textarea rows="2" cols="100" wrap="off" @bind="Details" readonly></textarea></td>
        </tr>
    </tbody>
</table>

@if (Results == null)
{
}
else
{
    <h3>@($"{nameof(Results.Visits)} ({Results.Visits.Count})")</h3>
    @if (Results.Visits.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>Party</th>
                    <th>Agency</th>
                    <th>Comments</th>
                    <th>Weather</th>
                    <th>Completed Activities</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.Visits)
                {
                    <tr>
                        <td>@item.FieldVisitIdentifier</td>
                        <td>@item.StartDate</td>
                        <td>@item.EndDate</td>
                        <td>@item.Party</td>
                        <td>@item.FieldVisitDetails.CollectionAgency</td>
                        <td>@item.FieldVisitDetails.Comments</td>
                        <td>@item.FieldVisitDetails.Weather</td>
                        <td>@CompletedActivities(item.FieldVisitDetails.CompletedVisitActivities)</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.ControlConditions)} ({Results.ControlConditions.Count})")</h3>
    @if (Results.ControlConditions.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Condition Type</th>
                    <th>Control Code</th>
                    <th>Control Cleaned</th>
                    <th>Date Cleaned</th>
                    <th>Party</th>
                    <th>Comments</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.ControlConditions)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.ConditionType</td>
                        <td>@item.Item.ControlCode?.IdOrDisplayName</td>
                        <td>@item.Item.ControlCleaned</td>
                        <td>@item.Item.DateCleaned</td>
                        <td>@item.Item.Party</td>
                        <td>@item.Item.Comments</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.GageZeroFlows)} ({Results.GageZeroFlows.Count})")</h3>
    @if (Results.GageZeroFlows.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Observation Date</th>
                    <th>Applicable Since Date</th>
                    <th>Observed Gage Height</th>
                    <th>Calculated Gage Height</th>
                    <th>Stage</th>
                    <th>Water Depth</th>
                    <th>Certainty</th>
                    <th>Party</th>
                    <th>Comments</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.GageZeroFlows)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.ObservationDate</td>
                        <td>@item.Item.ApplicableSinceDate</td>
                        <td>@GageZeroFlowObservedGageHeight(item.Item)</td>
                        <td>@GageZeroFlowCalculatedGageHeight(item.Item)</td>
                        <td>@GageZeroFlowStage(item.Item)</td>
                        <td>@GageZeroWaterDepth(item.Item)</td>
                        <td>@item.Item.Certainty</td>
                        <td>@item.Item.Party</td>
                        <td>@item.Item.Comments</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.Readings)} ({Results.Readings.Count})")</h3>
    @if (Results.Readings.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Time</th>
                    <th>Parameter</th>
                    <th>Value</th>
                    <th>Observed Value</th>
                    <th>Adjustment Amount</th>
                    <th>Reading Type</th>
                    <th>Method</th>
                    <th>Publish</th>
                    <th>SubLocation</th>
                    <th>Uncertainty</th>
                    <th>Grade</th>
                    <th>Qualifiers</th>
                    <th>Reference Point</th>
                    <th>Use Local Assumed Datum</th>
                    <th>Comments</th>
                    <th>SensorUniqueId</th>
                    <th>Measurement Device</th>
                    <th>Groundwater Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.Readings)
                {
                <tr>
                    <td>@item.VisitIdentifier</td>
                    <td>@item.Item.DateTimeOffset</td>
                    <td>@item.Item.ParameterId</td>
                    <td>@ReadingValue(item.Item)</td>
                    <td>@ReadingObservedValue(item.Item)</td>
                    <td>@ReadingAdjustmentAmount(item.Item)</td>
                    <td>@item.Item.ReadingType</td>
                    <td>@item.Item.Method</td>
                    <td>@item.Item.Publish</td>
                    <td>@item.Item.SubLocation</td>
                    <td>@item.Item.Uncertainty</td>
                    <td>@Grade(item.Item.Grade)</td>
                    <td>@Qualifiers(item.Item.ReadingQualifiers)</td>
                    <td>@item.Item.ReferencePointName</td>
                    <td>@item.Item.UseLocationDatumAsReference</td>
                    <td>@item.Item.Comments</td>
                    <td>@item.Item.SensorUniqueId</td>
                    <td>@MeasurementDevice(item.Item.MeasurementDevice)</td>
                    <td>@GroundwaterDetails(item.Item.GroundWaterMeasurementDetails)</td>
                </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.Calibrations)} ({Results.Calibrations.Count})")</h3>
    @if (Results.Calibrations.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Time</th>
                    <th>CalibrationType</th>
                    <th>Parameter</th>
                    <th>Value</th>
                    <th>Method</th>
                    <th>Publish</th>
                    <th>SubLocation</th>
                    <th>Party</th>
                    <th>Comments</th>
                    <th>Standard</th>
                    <th>Standard Details</th>
                    <th>SensorUniqueId</th>
                    <th>Measurement Device</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.Calibrations)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.DateTimeOffset</td>
                        <td>@item.Item.CalibrationType</td>
                        <td>@item.Item.ParameterId</td>
                        <td>@item.Item.Value (@item.Item.UnitId)</td>
                        <td>@item.Item.Method</td>
                        <td>@item.Item.Publish</td>
                        <td>@item.Item.SubLocation</td>
                        <td>@item.Item.Party</td>
                        <td>@item.Item.Comments</td>
                        <td>@item.Item.Standard</td>
                        <td>@StandardDetails(item.Item.StandardDetails)</td>
                        <td>@item.Item.SensorUniqueId</td>
                        <td>@MeasurementDevice(item.Item.MeasurementDevice)</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.Inspections)} ({Results.Inspections.Count})")</h3>
    @if (Results.Inspections.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>Time</th>
                    <th>InspectionType</th>
                    <th>SubLocation</th>
                    <th>Comments</th>
                    <th>Measurement Device</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.Inspections)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.DateTimeOffset</td>
                        <td>@item.Item.InspectionType</td>
                        <td>@item.Item.SubLocation</td>
                        <td>@item.Item.Comments</td>
                        <td>@MeasurementDevice(item.Item.MeasurementDevice)</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.LevelSurveys)} ({Results.LevelSurveys.Count})")</h3>
    @if (Results.LevelSurveys.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>OriginReferencePoint</th>
                    <th>Method</th>
                    <th>Party</th>
                    <th>Comments</th>
                    <th>Measurements</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.LevelSurveys)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.OriginReferencePointName</td>
                        <td>@item.Item.Method</td>
                        <td>@item.Item.Party</td>
                        <td>@item.Item.Comments</td>

                        @if (item.Item.LevelSurveyMeasurements.Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Time</th>
                                            <th>Reference Point Name</th>
                                            <th>Measured Elevation</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var m in item.Item.LevelSurveyMeasurements)
                                        {
                                            <tr>
                                                <td>@m.MeasurementTime</td>
                                                <td>@m.ReferencePointName</td>
                                                <td>@m.MeasuredElevation</td>
                                                <td>@m.Comments</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>@($"{nameof(Results.Discharges)} ({Results.Discharges.Count})")</h3>
    @if (Results.Discharges.Any())
    {
        <table class="RTable">
            <thead>
                <tr>
                    <th>Identifier</th>
                    <th>MeasurementId</th>
                    <th>StartTime</th>
                    <th>EndTime</th>
                    <th>MeasurementTime</th>
                    <th>Total Discharge</th>
                    <th>Adjustment</th>
                    <th>Mean Index Velocity</th>
                    <th>Party</th>
                    <th>Comments</th>
                    <th>Grade</th>
                    <th>Quality Assurance</th>
                    <th>Show in DCT?</th>
                    <th>Show in RDT?</th>
                    <th>Prevent Auto Publish?</th>
                    <th>Mean Gage Height Difference During Visit</th>
                    <th>Manually Calculated Mean Gage Height</th>
                    <th>Gage Height Adjustment Amount</th>
                    <th>Gage Height Comments</th>
                    <th>Gage Height Measurements</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Results.Discharges)
                {
                    <tr>
                        <td>@item.VisitIdentifier</td>
                        <td>@item.Item.MeasurementId</td>
                        <td>@item.Item.MeasurementStartTime</td>
                        <td>@item.Item.MeasurementEndTime</td>
                        <td>@item.Item.MeasurementTime</td>
                        <td>@Measurement(item.Item.Discharge)</td>
                        <td>@AdjustmentSummary(item.Item)</td>
                        <td>@Measurement(item.Item.MeanIndexVelocity)</td>
                        <td>@item.Item.Party</td>
                        <td>@item.Item.Comments</td>
                        <td>@Grade(item.Item.MeasurementGrade)</td>
                        <td>@QualityAssuranceSummary(item.Item)</td>
                        <td>@item.Item.ShowInDataCorrection</td>
                        <td>@item.Item.ShowInRatingDevelopment</td>
                        <td>@item.Item.PreventAutomaticPublishing</td>
                        <td>@Measurement(item.Item.MeanGageHeightDifferenceDuringVisit)</td>
                        <td>@Measurement(item.Item.ManuallyCalculatedMeanGageHeight)</td>
                        <td>@item.Item.GageHeightAdjustmentAmount</td>
                        <td>@item.Item.GageHeightComments</td>

                        @if (item.Item.GageHeightMeasurements.Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Time</th>
                                            <th>Value</th>
                                            <th>Include?</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var m in item.Item.GageHeightMeasurements)
                                        {
                                            <tr>
                                                <td>@m.MeasurementTime</td>
                                                <td>@Measurement(m.GageHeight)</td>
                                                <td>@m.Include</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }

                        @if (PanelDischarges(item.Item.ChannelMeasurements).Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Section Type</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                            <th>Channel Name</th>
                                            <th>Section Discharge</th>
                                            <th>Width</th>
                                            <th>Area</th>
                                            <th>Velocity Average</th>
                                            <th>Discharge Method</th>
                                            <th>Deployment Method</th>
                                            <th>Start Point</th>
                                            <th>Meter Suspension</th>
                                            <th>Velocity Observation Method</th>
                                            <th>Number of Verticals</th>
                                            <th>Meter Calibration</th>
                                            <th>Party</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var panel in PanelDischarges(item.Item.ChannelMeasurements))
                                        {
                                            <tr>
                                                <td>Panel</td>
                                                <td>@panel.MeasurementStartTime</td>
                                                <td>@panel.MeasurementEndTime</td>
                                                <td>@panel.ChannelName</td>
                                                <td>@Measurement(panel.Discharge)</td>
                                                <td>@Measurement(panel.Width)</td>
                                                <td>@Measurement(panel.Area)</td>
                                                <td>@Measurement(panel.VelocityAverage)</td>
                                                <td>@panel.DischargeMethod</td>
                                                <td>@panel.DeploymentMethod</td>
                                                <td>@panel.StartPoint</td>
                                                <td>@panel.MeterSuspension</td>
                                                <td>@panel.VelocityObservationMethod</td>
                                                <td>@panel.NumberOfVerticals</td>
                                                <td>@MeterCalibration(panel.MeterCalibration)</td>
                                                <td>@panel.Party</td>
                                                <td>@panel.Comments</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }

                        @if (AdcpDischarges(item.Item.ChannelMeasurements).Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Section Type</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                            <th>Channel Name</th>
                                            <th>Section Discharge</th>
                                            <th>Width</th>
                                            <th>Area</th>
                                            <th>Velocity Average</th>
                                            <th>Device Type</th>
                                            <th>Deployment Method</th>
                                            <th>Number Of Transects</th>
                                            <th>Magnetic Variation</th>
                                            <th>Discharge Coefficient Variation</th>
                                            <th>Percent Of Discharge Measured</th>
                                            <th>Transducer Depth</th>
                                            <th>Top Estimate Exponent</th>
                                            <th>Top Estimate Method</th>
                                            <th>Bottom Estimate Exponent</th>
                                            <th>Bottom Estimate Method</th>
                                            <th>Navigation Method</th>
                                            <th>Depth Reference</th>
                                            <th>Meter Suspension</th>
                                            <th>Software Version</th>
                                            <th>Firmware Version</th>
                                            <th>Measurement Device</th>
                                            <th>Party</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var adcp in AdcpDischarges(item.Item.ChannelMeasurements))
                                        {
                                            <tr>
                                                <td>ADCP</td>
                                                <td>@adcp.MeasurementStartTime</td>
                                                <td>@adcp.MeasurementEndTime</td>
                                                <td>@adcp.ChannelName</td>
                                                <td>@Measurement(adcp.Discharge)</td>
                                                <td>@Measurement(adcp.Width)</td>
                                                <td>@Measurement(adcp.Area)</td>
                                                <td>@Measurement(adcp.VelocityAverage)</td>
                                                <td>@adcp.AdcpDeviceType</td>
                                                <td>@adcp.DeploymentMethod</td>
                                                <td>@adcp.NumberOfTransects</td>
                                                <td>@adcp.MagneticVariation</td>
                                                <td>@adcp.DischargeCoefficientVariation</td>
                                                <td>@adcp.PercentOfDischargeMeasured</td>
                                                <td>@adcp.TransducerDepth</td>
                                                <td>@adcp.TopEstimateExponent</td>
                                                <td>@adcp.TopEstimateMethod?.IdOrDisplayName</td>
                                                <td>@adcp.BottomEstimateExponent</td>
                                                <td>@adcp.BottomEstimateMethod?.IdOrDisplayName</td>
                                                <td>@adcp.NavigationMethod?.IdOrDisplayName</td>
                                                <td>@adcp.DepthReference</td>
                                                <td>@adcp.MeterSuspension</td>
                                                <td>@adcp.SoftwareVersion</td>
                                                <td>@adcp.FirmwareVersion</td>
                                                <td>@MeasurementDevice(adcp.MeasurementDevice)</td>
                                                <td>@adcp.Party</td>
                                                <td>@adcp.Comments</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }

                        @if (OtherDischarges(item.Item.ChannelMeasurements).Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Section Type</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                            <th>Channel Name</th>
                                            <th>Section Discharge</th>
                                            <th>Monitoring Method</th>
                                            <th>Party</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var other in OtherDischarges(item.Item.ChannelMeasurements))
                                        {
                                            <tr>
                                                <td>Other</td>
                                                <td>@other.MeasurementStartTime</td>
                                                <td>@other.MeasurementEndTime</td>
                                                <td>@other.ChannelName</td>
                                                <td>@Measurement(other.Discharge)</td>
                                                <td>@other.MonitoringMethodCode</td>
                                                <td>@other.Party</td>
                                                <td>@other.Comments</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }

                        @if (VolumetricDischarges(item.Item.ChannelMeasurements).Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Section Type</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                            <th>Channel Name</th>
                                            <th>Section Discharge</th>
                                            <th>Measurement Container</th>
                                            <th>IsObserved</th>
                                            <th>Party</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var volumetric in VolumetricDischarges(item.Item.ChannelMeasurements))
                                        {
                                            <tr>
                                                <td>Volumetric</td>
                                                <td>@volumetric.MeasurementStartTime</td>
                                                <td>@volumetric.MeasurementEndTime</td>
                                                <td>@volumetric.ChannelName</td>
                                                <td>@Measurement(volumetric.Discharge)</td>
                                                <td>@Measurement(volumetric.MeasurementContainer)</td>
                                                <td>@volumetric.IsObserved</td>
                                                <td>@volumetric.Party</td>
                                                <td>@volumetric.Comments</td>

                                                @if (volumetric.Readings.Any())
                                                {
                                                    <td>
                                                        <table class="RTable">
                                                            <thead>
                                                                <tr>
                                                                    <th>Include?</th>
                                                                    <th>Name</th>
                                                                    <th>Duration</th>
                                                                    <th>Discharge</th>
                                                                    <th>Starting Volume</th>
                                                                    <th>Ending Volume</th>
                                                                    <th>Volume Change</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var r in volumetric.Readings)
                                                                {
                                                                    <tr>
                                                                        <td>@r.IsUsed</td>
                                                                        <td>@r.Name</td>
                                                                        <td>@Measurement(r.DurationSeconds, "secs")</td>
                                                                        <td>@Measurement(r.Discharge, volumetric.Discharge.UnitId)</td>
                                                                        <td>@Measurement(r.StartingVolume, volumetric.MeasurementContainerUnit)</td>
                                                                        <td>@Measurement(r.EndingVolume, volumetric.MeasurementContainerUnit)</td>
                                                                        <td>@Measurement(r.VolumeChange, volumetric.MeasurementContainerUnit)</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }

                        @if (EngineeredStructureDischarges(item.Item.ChannelMeasurements).Any())
                        {
                            <td>
                                <table class="RTable">
                                    <thead>
                                        <tr>
                                            <th>Section Type</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                            <th>Channel Name</th>
                                            <th>Section Discharge</th>
                                            <th>Structure Type</th>
                                            <th>Mean Head</th>
                                            <th>Structure Equation</th>
                                            <th>Party</th>
                                            <th>Comments</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var flume in EngineeredStructureDischarges(item.Item.ChannelMeasurements))
                                        {
                                            <tr>
                                                <td>EngineeredStructure</td>
                                                <td>@flume.MeasurementStartTime</td>
                                                <td>@flume.MeasurementEndTime</td>
                                                <td>@flume.ChannelName</td>
                                                <td>@Measurement(flume.Discharge)</td>
                                                <td>@flume.EngineeredStructureType</td>
                                                <td>@Measurement(flume.MeanHead)</td>
                                                <td>@flume.StructureEquation</td>
                                                <td>@flume.Party</td>
                                                <td>@flume.Comments</td>

                                                @if (flume.HeadReadings.Any())
                                                {
                                                    <td>
                                                        <table class="RTable">
                                                            <thead>
                                                                <tr>
                                                                    <th>Include?</th>
                                                                    <th>Time</th>
                                                                    <th>Head</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var r in flume.HeadReadings)
                                                                {
                                                                    <tr>
                                                                        <td>@r.IsUsedInMean</td>
                                                                        <td>@r.ReadingTime</td>
                                                                        <td>@Measurement(r.Head, flume.MeanHeadUnitId)</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </td>
                                                }

                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code
{
    private List<string> TimeZones { get; } = BlazorTestDrive.TimeZones.AllTimeZones;

    private List<Example> Examples { get; } = BlazorTestDrive.Examples.AllExamples;

    private List<EncodingInfo> Encodings { get; } = BlazorTestDrive.Encodings.AllEncodings;

    private string Config { get; set; }

    private string _csvContent;

    private string Csv
    {
        get => _csvContent;
        set => SetCsvUtf8Content(value);
    }
    private byte[] CsvBytes { get; set; }

    private void SetCsvUtf8Content(string csv)
    {
        SetCsvContentAsync(Encoding.UTF8.GetBytes(csv), Encoding.UTF8).Wait();
    }

    private async Task SetCsvContentAsync(byte[] bytes, Encoding encoding)
    {
        CsvBytes = bytes;
        _csvContent = await LoadBytesAsTextAsync(CsvBytes, encoding);
    }

    private string Details { get; set; }
    private string Location { get; set; }
    private string TimeZone { get; set; }

    private Results Results { get; set; }

    private IBrowserFile ConfigFile { get; set; }
    private IBrowserFile CsvFile { get; set; }

    private async Task OnConfigFileSelected(InputFileChangeEventArgs eventArgs)
    {
        ConfigFile = eventArgs.GetMultipleFiles().FirstOrDefault();

        await LoadConfigFile();
    }

    private async Task OnCsvFileSelected(InputFileChangeEventArgs eventArgs)
    {
        CsvFile = eventArgs.GetMultipleFiles().FirstOrDefault();

        await LoadCsvFile();
    }

    private async Task LoadConfigFile()
    {
        var file = ConfigFile;
        ConfigFile = null;

        Config = await LoadFileAsText(file);
    }

    private async Task LoadCsvFile()
    {
        var file = CsvFile;
        CsvFile = null;

        var encoding = SelectedEncoding;
        await SetCsvContentAsync(await LoadFileAsBytesAsync(file), encoding);

        UpdateEncodingInfo(encoding);
    }

    private void UpdateEncodingInfo(Encoding encoding)
    {
        Details = $"{CsvBytes.Length} bytes encoded as {Csv.Length} characters with EncodingName='{encoding.EncodingName}'.";
    }

    private Encoding SelectedEncoding => Encodings
        .FirstOrDefault(e => e.Name == SelectedEncodingName)
        ?.GetEncoding() ?? Encoding.UTF8;

    private async Task<byte[]> LoadFileAsBytesAsync(IBrowserFile file)
    {
        using (var writeSteam = new MemoryStream())
        {
            using (var readStream = file.OpenReadStream(10_000_000))
            {
                await readStream.CopyToAsync(writeSteam);
            }

            return writeSteam.GetBuffer();
        }
    }

    private async Task<string> LoadFileAsText(IBrowserFile file, EncodingInfo encodingInfo = null)
    {
        return await LoadBytesAsTextAsync(await LoadFileAsBytesAsync(file), encodingInfo);
    }

    private async Task<string> LoadBytesAsTextAsync(byte[] bytes, EncodingInfo encodingInfo = null)
    {
        return await LoadBytesAsTextAsync(bytes, encodingInfo?.GetEncoding() ?? Encoding.UTF8);
    }

    private async Task<string> LoadBytesAsTextAsync(byte[] bytes, Encoding encoding)
    {
        using (var stream = new MemoryStream(bytes))
        using (var reader = new StreamReader(stream, encoding, true))
        {
            return await reader.ReadToEndAsync();
        }
    }

    private string _selectedExampleId;

    private string SelectedExampleId
    {
        get => _selectedExampleId;
        set
        {
            _selectedExampleId = value;

            var example = FindExampleById(_selectedExampleId);

            if (example != null)
            {
                Config = example.ConfigText.Trim();
                SetCsvUtf8Content(example.CsvText.Trim());
                SelectedEncodingName = "utf-8";

                Location = string.IsNullOrWhiteSpace(example.DefaultLocation)
                    ? string.Empty
                    : example.DefaultLocation;

                TimeZone = string.IsNullOrWhiteSpace(example.DefaultTimeZone)
                    ? string.Empty
                    : example.DefaultTimeZone;

                SetExampleIdInUrl(example.Id);
            }
        }
    }

    private string _selectedEncodingName;

    private string SelectedEncodingName
    {
        get => _selectedEncodingName;
        set
        {
            _selectedEncodingName = value;

            var encoding = SelectedEncoding;
            SetCsvContentAsync(CsvBytes, encoding).Wait();

            UpdateEncodingInfo(encoding);
        }
    }

    private string DescriptionHtml => FindExampleById(_selectedExampleId)?.Description?.Trim();

    private Example FindExampleById(string id)
    {
        return Examples
            .FirstOrDefault(e => e.Id.Equals(id, StringComparison.InvariantCultureIgnoreCase));
    }

    private const string QueryParameterName = "example";

    private string GetExampleIdFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var parameters = QueryHelpers.ParseQuery(uri.Query);

        return parameters.TryGetValue(QueryParameterName, out var values)
            ? values.LastOrDefault()
            : null;
    }

    private void SetExampleIdInUrl(string exampleId)
    {
        var uri = new Uri(NavigationManager.Uri);
        var parameters = QueryHelpers.ParseQuery(uri.Query);

        if (string.IsNullOrWhiteSpace(exampleId))
        {
            parameters.Remove(QueryParameterName);
        }
        else
        {
            if (parameters.TryGetValue(QueryParameterName, out var values) && exampleId == values.LastOrDefault())
                return;

            parameters[QueryParameterName] = exampleId;
        }

        var newUri = uri.GetComponents(UriComponents.Scheme | UriComponents.Host | UriComponents.Port | UriComponents.Path, UriFormat.UriEscaped);
        foreach (var parameter in parameters)
        {
            foreach (var value in parameter.Value)
            {
                newUri = QueryHelpers.AddQueryString(newUri, parameter.Key, value);
            }
        }

        NavigationManager.NavigateTo(newUri);
    }

    protected override void OnInitialized()
    {
        LoadState();

        var exampleId = GetExampleIdFromUrl();

        if (!string.IsNullOrWhiteSpace(exampleId))
        {
            var example = FindExampleById(exampleId);

            if (example != null && example.Id != SelectedExampleId)
            {
                SelectedExampleId = example.Id;
            }
        }
        else if (string.IsNullOrWhiteSpace(Csv) && string.IsNullOrWhiteSpace(Config))
        {
            SelectedExampleId = BlazorTestDrive.Examples.AllExamples.First().Id;
        }
        else
        {
            SelectedExampleId = string.Empty;
        }

        base.OnInitialized();
    }

    private void SaveState()
    {
        var persistedState = new PersistedState
        {
            Config = Config,
            Csv = Csv,
            Location = Location,
            Timezone = TimeZone
        };

        try
        {
            LocalStorage.SetItem(nameof(PersistedState), persistedState);
        }
        catch (Exception)
        {
        }
    }

    private void LoadState()
    {
        try
        {
            var persistedState = LocalStorage.GetItem<PersistedState>(nameof(PersistedState));
            if (persistedState != null)
            {
                Location = persistedState.Location;
                TimeZone = persistedState.Timezone;
                Csv = persistedState.Csv;
                CsvBytes = Encoding.UTF8.GetBytes(Csv);
                Config = persistedState.Config;
            }
        }
        catch (Exception)
        {
        }

    }

    private void Parse(MouseEventArgs e)
    {
        var parser = new Parser();

        try
        {
            Results = null;
            Details = "";

            var (details, results) = parser
                .Parse(Config, CsvBytes, Location, TimeZone);

            SaveState();

            Details = details;
            Results = results;
        }
        catch (Exception exception)
        {
            var context = "";
            var stackTrace = exception.StackTrace;

            while (exception != null)
            {
                parser.Logger.Error($"{context}{exception.Message}");

                context = "(Inner): ";
                exception = exception.InnerException;
            }

            parser.Logger.Error(stackTrace);

            Details = parser.Logger.Builder.ToString();
        }
    }

    private string CompletedActivities(CompletedVisitActivities activities)
    {
        if (activities == null)
            return null;

        var list = new List<string>();

        if (activities.ConductedLevelSurvey)
            list.Add("Level Surveys");

        if (activities.GroundWaterLevels)
            list.Add("Ground water levels");

        if (activities.SafetyInspectionPerformed)
            list.Add("Safety Inspection");

        if (activities.RecorderDataCollected)
            list.Add("Recorder data collected");

        if (activities.WaterQualitySample)
            list.Add("Water quality samples");

        if (activities.WaterQualityCrossSection)
            list.Add("Water quality cross-section");

        if (activities.SedimentSample)
            list.Add("Sediment samples");

        if (activities.BiologicalSample)
            list.Add("Biological samples");

        if (activities.OtherSample)
            list.Add("Other samples");

        if (!list.Any())
            list.Add("None");

        return string.Join(", ", list);
    }

    private string Measurement(Measurement measurement)
    {
        if (measurement == null)
            return null;

        return Measurement(measurement.Value, measurement.UnitId);
    }

    private string Measurement(double? value, string unitId)
    {
        if (!value.HasValue)
            return null;

        return $"{value} ({unitId})";
    }

    private string MeasurementDevice(MeasurementDevice device)
    {
        if (device == null)
            return null;

        var list = new List<string>();

        if (!string.IsNullOrEmpty(device.Manufacturer))
            list.Add($"Manufacturer: {device.Manufacturer}");

        if (!string.IsNullOrEmpty(device.Model))
            list.Add($"Model: {device.Model}");

        if (!string.IsNullOrEmpty(device.SerialNumber))
            list.Add($"Serial Number: {device.SerialNumber}");

        return string.Join(", ", list);
    }

    private string StandardDetails(StandardDetails details)
    {
        if (details == null)
            return null;

        var list = new List<string>();

        if (!string.IsNullOrEmpty(details.LotNumber))
            list.Add($"Lot Number: {details.LotNumber}");

        if (!string.IsNullOrEmpty(details.StandardCode))
            list.Add($"Standard Code: {details.StandardCode}");

        if (details.ExpirationDate.HasValue)
            list.Add($"Expiration Date: {details.ExpirationDate:O}");

        if (details.Temperature.HasValue)
            list.Add($"Temperature: {details.Temperature}");

        return string.Join(", ", list);
    }

    private string Grade(Grade grade)
    {
        if (grade == null)
            return null;

        return grade.Code.HasValue
            ? $"{grade.Code}"
            : grade.DisplayName;
    }

    private string ReadingValue(Reading reading)
    {
        return reading.AdjustmentAmount.HasValue
            ? $"{reading.Value + reading.AdjustmentAmount} ({reading.UnitId})"
            : $"{reading.Value} ({reading.UnitId})";
    }

    private string ReadingObservedValue(Reading reading)
    {
        return $"{reading.Value} ({reading.UnitId})";
    }

    private string ReadingAdjustmentAmount(Reading reading)
    {
        return reading.AdjustmentAmount.HasValue
            ? $"{reading.AdjustmentAmount} ({reading.UnitId})"
            : null;
    }

    private string Qualifiers(List<ReadingQualifierPickList> qualifiers)
    {
        if (qualifiers == null)
            return null;

        return string.Join(", ", qualifiers.Select(q => q.IdOrDisplayName));
    }

    private string GroundwaterDetails(GroundWaterMeasurementDetails details)
    {
        if (details == null)
            return null;

        var list = new List<string>();

        if (details.Cut.HasValue)
            list.Add($"Cut: {details.Cut}");

        if (details.Hold.HasValue)
            list.Add($"Hold: {details.Hold}");

        if (details.TapeCorrection.HasValue)
            list.Add($"Tape Correction: {details.TapeCorrection}");

        if (details.WaterLevel.HasValue)
            list.Add($"Water Level: {details.WaterLevel}");

        return string.Join(", ", list);
    }

    private string AdjustmentSummary(DischargeActivity discharge)
    {
        if (discharge?.AdjustmentAmount == null)
            return null;

        return $"Adjusted by {discharge.AdjustmentAmount} ({discharge.AdjustmentType}) Reason={discharge.ReasonForAdjustment})";
    }

    private string QualityAssuranceSummary(DischargeActivity discharge)
    {
        if (discharge == null)
            return null;

        var builder = new StringBuilder();

        if (discharge.ActiveUncertaintyType != UncertaintyType.None)
        {
            builder.Append($"Active Uncertainty Type: {discharge.ActiveUncertaintyType} ");

            if (discharge.QualitativeUncertainty.HasValue)
                builder.Append($"{discharge.QualitativeUncertainty} ");

            if (discharge.QuantitativeUncertainty.HasValue)
                builder.Append($"{discharge.QuantitativeUncertainty} ");
        }

        if (!string.IsNullOrWhiteSpace(discharge.QualityAssuranceComments))
            builder.Append($"{discharge.QualityAssuranceComments}");

        return builder.ToString();
    }

    private List<AdcpDischargeSection> AdcpDischarges(IEnumerable<ChannelMeasurementBase> channelMeasurements)
    {
        return channelMeasurements
            .Select(m => m as AdcpDischargeSection)
            .Where(section => section != null)
            .ToList();
    }

    private List<ManualGaugingDischargeSection> PanelDischarges(IEnumerable<ChannelMeasurementBase> channelMeasurements)
    {
        return channelMeasurements
            .Select(m => m as ManualGaugingDischargeSection)
            .Where(section => section != null)
            .ToList();
    }

    private List<OtherDischargeSection> OtherDischarges(IEnumerable<ChannelMeasurementBase> channelMeasurements)
    {
        return channelMeasurements
            .Select(m => m as OtherDischargeSection)
            .Where(section => section != null)
            .ToList();
    }

    private List<VolumetricDischarge> VolumetricDischarges(IEnumerable<ChannelMeasurementBase> channelMeasurements)
    {
        return channelMeasurements
            .Select(m => m as VolumetricDischarge)
            .Where(section => section != null)
            .ToList();
    }

    private List<EngineeredStructureDischarge> EngineeredStructureDischarges(IEnumerable<ChannelMeasurementBase> channelMeasurements)
    {
        return channelMeasurements
            .Select(m => m as EngineeredStructureDischarge)
            .Where(section => section != null)
            .ToList();
    }

    private string MeterCalibration(MeterCalibration calibration)
    {
        if (calibration == null)
            return null;

        var list = new List<string>();

        list.Add($"Meter Type: {calibration.MeterType}");

        if (!string.IsNullOrWhiteSpace(calibration.Configuration))
            list.Add($"Configuration: {calibration.Configuration}");

        if (!string.IsNullOrWhiteSpace(calibration.Manufacturer))
            list.Add($"Manufacturer: {calibration.Manufacturer}");

        if (!string.IsNullOrWhiteSpace(calibration.Model))
            list.Add($"Model: {calibration.Model}");

        if (!string.IsNullOrWhiteSpace(calibration.SerialNumber))
            list.Add($"SerialNumber: {calibration.SerialNumber}");

        if (!string.IsNullOrWhiteSpace(calibration.SoftwareVersion))
            list.Add($"SoftwareVersion: {calibration.SoftwareVersion}");

        if (!string.IsNullOrWhiteSpace(calibration.FirmwareVersion))
            list.Add($"FirmwareVersion: {calibration.FirmwareVersion}");

        if (calibration.Equations.Any())
        {
            list.Add($"Equations: [{string.Join(", ", calibration.Equations.Select(MeterCalibrationEquation))}]");
        }

        return string.Join(", ", list);
    }

    private string MeterCalibrationEquation(MeterCalibrationEquation equation)
    {
        var builder = new StringBuilder();

        builder.Append($"Slope={equation.Slope} Intercept={equation.Intercept} ({equation.InterceptUnitId})");

        if (equation.RangeStart.HasValue)
            builder.Append($" RangeStart={equation.RangeStart}");

        if (equation.RangeEnd.HasValue)
            builder.Append($" RangeEnd={equation.RangeEnd}");

        return builder.ToString();
    }

    private string GageZeroFlowObservedGageHeight(GageZeroFlowActivity zeroFlow)
    {
        return !zeroFlow.Stage.HasValue
            ? $"{zeroFlow.GageHeight.Value} ({zeroFlow.GageHeight.UnitId})"
            : null;
    }

    private string GageZeroFlowCalculatedGageHeight(GageZeroFlowActivity zeroFlow)
    {
        return zeroFlow.Stage.HasValue && zeroFlow.WaterDepth.HasValue
            ? $"{zeroFlow.Stage - zeroFlow.WaterDepth} ({zeroFlow.GageHeight.UnitId})"
            : null;
    }

    private string GageZeroFlowStage(GageZeroFlowActivity zeroFlow)
    {
        return zeroFlow.Stage.HasValue
            ? $"{zeroFlow.Stage} ({zeroFlow.GageHeight.UnitId})"
            : null;
    }

    private string GageZeroWaterDepth(GageZeroFlowActivity zeroFlow)
    {
        return zeroFlow.Stage.HasValue
            ? $"{zeroFlow.WaterDepth} ({zeroFlow.GageHeight.UnitId})"
            : null;
    }
}
